// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userPostFieldNames          = builder.RawFieldNames(&UserPost{})
	userPostRows                = strings.Join(userPostFieldNames, ",")
	userPostRowsExpectAutoSet   = strings.Join(stringx.Remove(userPostFieldNames, "`post_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userPostRowsWithPlaceHolder = strings.Join(stringx.Remove(userPostFieldNames, "`post_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGoUserUserPostPostIdPrefix          = "cache:goUser:userPost:postId:"
	cacheGoUserUserPostUserIdUserPhonePrefix = "cache:goUser:userPost:userId:userPhone:"
)

type (
	userPostModel interface {
		Insert(ctx context.Context, data *UserPost) (sql.Result, error)
		FindOne(ctx context.Context, postId int64) (*UserPost, error)
		FindOneByUserIdUserPhone(ctx context.Context, userId int64, userPhone string) (*UserPost, error)
		Update(ctx context.Context, data *UserPost) error
		Delete(ctx context.Context, postId int64) error
	}

	defaultUserPostModel struct {
		sqlc.CachedConn
		table string
	}

	UserPost struct {
		PostId       int64  `db:"post_id"`       // 收件地址表
		UserId       int64  `db:"user_id"`       // 用户唯一id
		UserName     string `db:"user_name"`     // 收货人姓名
		UserPhone    string `db:"user_phone"`    // 收货人手机号
		ProvinceCode int64  `db:"province_code"` // 省/直辖市编号
		Province     string `db:"province"`      // 省/直辖市名称
		CityCode     int64  `db:"city_code"`     // 城市编号
		City         string `db:"city"`          // 城市名称
		AreaCode     int64  `db:"area_code"`     // 区域编号
		Area         string `db:"area"`          // 区域名称
		Address      string `db:"address"`       // 收货地址
		Status       int64  `db:"status"`        // 0-未启用 | 1-已启用
		CreateAt     int64  `db:"create_at"`     // 创建时间
		UpdateAt     int64  `db:"update_at"`     // 更新时间
	}
)

func newUserPostModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserPostModel {
	return &defaultUserPostModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_post`",
	}
}

func (m *defaultUserPostModel) Delete(ctx context.Context, postId int64) error {
	data, err := m.FindOne(ctx, postId)
	if err != nil {
		return err
	}

	goUserUserPostPostIdKey := fmt.Sprintf("%s%v", cacheGoUserUserPostPostIdPrefix, postId)
	goUserUserPostUserIdUserPhoneKey := fmt.Sprintf("%s%v:%v", cacheGoUserUserPostUserIdUserPhonePrefix, data.UserId, data.UserPhone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `post_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, postId)
	}, goUserUserPostPostIdKey, goUserUserPostUserIdUserPhoneKey)
	return err
}

func (m *defaultUserPostModel) FindOne(ctx context.Context, postId int64) (*UserPost, error) {
	goUserUserPostPostIdKey := fmt.Sprintf("%s%v", cacheGoUserUserPostPostIdPrefix, postId)
	var resp UserPost
	err := m.QueryRowCtx(ctx, &resp, goUserUserPostPostIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `post_id` = ? limit 1", userPostRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, postId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserPostModel) FindOneByUserIdUserPhone(ctx context.Context, userId int64, userPhone string) (*UserPost, error) {
	goUserUserPostUserIdUserPhoneKey := fmt.Sprintf("%s%v:%v", cacheGoUserUserPostUserIdUserPhonePrefix, userId, userPhone)
	var resp UserPost
	err := m.QueryRowIndexCtx(ctx, &resp, goUserUserPostUserIdUserPhoneKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `user_phone` = ? limit 1", userPostRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, userPhone); err != nil {
			return nil, err
		}
		return resp.PostId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserPostModel) Insert(ctx context.Context, data *UserPost) (sql.Result, error) {
	goUserUserPostPostIdKey := fmt.Sprintf("%s%v", cacheGoUserUserPostPostIdPrefix, data.PostId)
	goUserUserPostUserIdUserPhoneKey := fmt.Sprintf("%s%v:%v", cacheGoUserUserPostUserIdUserPhonePrefix, data.UserId, data.UserPhone)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userPostRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.UserName, data.UserPhone, data.ProvinceCode, data.Province, data.CityCode, data.City, data.AreaCode, data.Area, data.Address, data.Status, data.CreateAt, data.UpdateAt)
	}, goUserUserPostPostIdKey, goUserUserPostUserIdUserPhoneKey)
	return ret, err
}

func (m *defaultUserPostModel) Update(ctx context.Context, newData *UserPost) error {
	data, err := m.FindOne(ctx, newData.PostId)
	if err != nil {
		return err
	}

	goUserUserPostPostIdKey := fmt.Sprintf("%s%v", cacheGoUserUserPostPostIdPrefix, data.PostId)
	goUserUserPostUserIdUserPhoneKey := fmt.Sprintf("%s%v:%v", cacheGoUserUserPostUserIdUserPhonePrefix, data.UserId, data.UserPhone)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `post_id` = ?", m.table, userPostRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.UserName, newData.UserPhone, newData.ProvinceCode, newData.Province, newData.CityCode, newData.City, newData.AreaCode, newData.Area, newData.Address, newData.Status, newData.CreateAt, newData.UpdateAt, newData.PostId)
	}, goUserUserPostPostIdKey, goUserUserPostUserIdUserPhoneKey)
	return err
}

func (m *defaultUserPostModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoUserUserPostPostIdPrefix, primary)
}

func (m *defaultUserPostModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `post_id` = ? limit 1", userPostRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserPostModel) tableName() string {
	return m.table
}
