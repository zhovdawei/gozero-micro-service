// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`user_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`user_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGoUserUserUserIdPrefix = "cache:goUser:user:userId:"
	cacheGoUserUserEmailPrefix  = "cache:goUser:user:email:"
	cacheGoUserUserIdCardPrefix = "cache:goUser:user:idCard:"
	cacheGoUserUserPhonePrefix  = "cache:goUser:user:phone:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*User, error)
		FindOneByEmail(ctx context.Context, email string) (*User, error)
		FindOneByIdCard(ctx context.Context, idCard string) (*User, error)
		FindOneByPhone(ctx context.Context, phone string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		UserId       int64  `db:"user_id"`       // 用户唯一id
		Name         string `db:"name"`          // 用户名称
		IdCard       string `db:"id_card"`       // 身份证
		Email        string `db:"email"`         // 邮箱
		Phone        string `db:"phone"`         // 手机号
		Password     string `db:"password"`      // 用户密码
		Gender       int64  `db:"gender"`        // 男-1｜女-2｜未公开-0
		Birthday     int64  `db:"birthday"`      // 出生年月日
		ProvinceCode int64  `db:"province_code"` // 省/直辖市编号
		Province     string `db:"province"`      // 省/直辖市名称
		CityCode     int64  `db:"city_code"`     // 城市编号
		City         string `db:"city"`          // 城市名称
		AreaCode     int64  `db:"area_code"`     // 区域编号
		Area         string `db:"area"`          // 区域名称
		CreateAt     int64  `db:"create_at"`     // 创建时间
		UpdateAt     int64  `db:"update_at"`     // 更新时间
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, userId int64) error {
	data, err := m.FindOne(ctx, userId)
	if err != nil {
		return err
	}

	goUserUserEmailKey := fmt.Sprintf("%s%v", cacheGoUserUserEmailPrefix, data.Email)
	goUserUserIdCardKey := fmt.Sprintf("%s%v", cacheGoUserUserIdCardPrefix, data.IdCard)
	goUserUserPhoneKey := fmt.Sprintf("%s%v", cacheGoUserUserPhonePrefix, data.Phone)
	goUserUserUserIdKey := fmt.Sprintf("%s%v", cacheGoUserUserUserIdPrefix, userId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, goUserUserEmailKey, goUserUserIdCardKey, goUserUserPhoneKey, goUserUserUserIdKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, userId int64) (*User, error) {
	goUserUserUserIdKey := fmt.Sprintf("%s%v", cacheGoUserUserUserIdPrefix, userId)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, goUserUserUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email string) (*User, error) {
	goUserUserEmailKey := fmt.Sprintf("%s%v", cacheGoUserUserEmailPrefix, email)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, goUserUserEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.UserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByIdCard(ctx context.Context, idCard string) (*User, error) {
	goUserUserIdCardKey := fmt.Sprintf("%s%v", cacheGoUserUserIdCardPrefix, idCard)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, goUserUserIdCardKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `id_card` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, idCard); err != nil {
			return nil, err
		}
		return resp.UserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByPhone(ctx context.Context, phone string) (*User, error) {
	goUserUserPhoneKey := fmt.Sprintf("%s%v", cacheGoUserUserPhonePrefix, phone)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, goUserUserPhoneKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phone); err != nil {
			return nil, err
		}
		return resp.UserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	goUserUserEmailKey := fmt.Sprintf("%s%v", cacheGoUserUserEmailPrefix, data.Email)
	goUserUserIdCardKey := fmt.Sprintf("%s%v", cacheGoUserUserIdCardPrefix, data.IdCard)
	goUserUserPhoneKey := fmt.Sprintf("%s%v", cacheGoUserUserPhonePrefix, data.Phone)
	goUserUserUserIdKey := fmt.Sprintf("%s%v", cacheGoUserUserUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.IdCard, data.Email, data.Phone, data.Password, data.Gender, data.Birthday, data.ProvinceCode, data.Province, data.CityCode, data.City, data.AreaCode, data.Area, data.CreateAt, data.UpdateAt)
	}, goUserUserEmailKey, goUserUserIdCardKey, goUserUserPhoneKey, goUserUserUserIdKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	data, err := m.FindOne(ctx, newData.UserId)
	if err != nil {
		return err
	}

	goUserUserEmailKey := fmt.Sprintf("%s%v", cacheGoUserUserEmailPrefix, data.Email)
	goUserUserIdCardKey := fmt.Sprintf("%s%v", cacheGoUserUserIdCardPrefix, data.IdCard)
	goUserUserPhoneKey := fmt.Sprintf("%s%v", cacheGoUserUserPhonePrefix, data.Phone)
	goUserUserUserIdKey := fmt.Sprintf("%s%v", cacheGoUserUserUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.IdCard, newData.Email, newData.Phone, newData.Password, newData.Gender, newData.Birthday, newData.ProvinceCode, newData.Province, newData.CityCode, newData.City, newData.AreaCode, newData.Area, newData.CreateAt, newData.UpdateAt, newData.UserId)
	}, goUserUserEmailKey, goUserUserIdCardKey, goUserUserPhoneKey, goUserUserUserIdKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoUserUserUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
