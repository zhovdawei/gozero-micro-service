// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsFieldNames          = builder.RawFieldNames(&Goods{})
	goodsRows                = strings.Join(goodsFieldNames, ",")
	goodsRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsFieldNames, "`goods_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	goodsRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsFieldNames, "`goods_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGoGoodsGoodsGoodsIdPrefix = "cache:goGoods:goods:goodsId:"
)

type (
	goodsModel interface {
		Insert(ctx context.Context, data *Goods) (sql.Result, error)
		FindOne(ctx context.Context, goodsId int64) (*Goods, error)
		Update(ctx context.Context, data *Goods) error
		Delete(ctx context.Context, goodsId int64) error
	}

	defaultGoodsModel struct {
		sqlc.CachedConn
		table string
	}

	Goods struct {
		GoodsId   int64  `db:"goods_id"`   // 商品id主键
		GoodsName string `db:"goods_name"` // 商品名称
		Title     string `db:"title"`      // 商品标题
		Company   string `db:"company"`    // 公司名称
		Category  string `db:"category"`   // 商品类型
		Logo      string `db:"logo"`       // 商品LOGO
		Content   string `db:"content"`    // 商品详情
		SalePrice int64  `db:"sale_price"` // 零售价(单位分)
		MinPrice  int64  `db:"min_price"`  // 最低价(单位分)
		MaxPrice  int64  `db:"max_price"`  // 最高价(单位分)
		Stock     int64  `db:"stock"`      // 库存
		Sale      int64  `db:"sale"`       // 销量
		IsAttr    int64  `db:"is_attr"`    // 是否含有规格(0-没有，1-含有)
		Status    int64  `db:"status"`     // 状态(1-未审核，2-已审核，3-已上架)
		Deleted   int64  `db:"deleted"`    // 删除(0-正常，1-已删除)
		CreateAt  int64  `db:"create_at"`  // 创建时间
		UpdateAt  int64  `db:"update_at"`  // 更新时间
	}
)

func newGoodsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultGoodsModel {
	return &defaultGoodsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`goods`",
	}
}

func (m *defaultGoodsModel) Delete(ctx context.Context, goodsId int64) error {
	goGoodsGoodsGoodsIdKey := fmt.Sprintf("%s%v", cacheGoGoodsGoodsGoodsIdPrefix, goodsId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `goods_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, goodsId)
	}, goGoodsGoodsGoodsIdKey)
	return err
}

func (m *defaultGoodsModel) FindOne(ctx context.Context, goodsId int64) (*Goods, error) {
	goGoodsGoodsGoodsIdKey := fmt.Sprintf("%s%v", cacheGoGoodsGoodsGoodsIdPrefix, goodsId)
	var resp Goods
	err := m.QueryRowCtx(ctx, &resp, goGoodsGoodsGoodsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `goods_id` = ? limit 1", goodsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, goodsId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsModel) Insert(ctx context.Context, data *Goods) (sql.Result, error) {
	goGoodsGoodsGoodsIdKey := fmt.Sprintf("%s%v", cacheGoGoodsGoodsGoodsIdPrefix, data.GoodsId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GoodsName, data.Title, data.Company, data.Category, data.Logo, data.Content, data.SalePrice, data.MinPrice, data.MaxPrice, data.Stock, data.Sale, data.IsAttr, data.Status, data.Deleted, data.CreateAt, data.UpdateAt)
	}, goGoodsGoodsGoodsIdKey)
	return ret, err
}

func (m *defaultGoodsModel) Update(ctx context.Context, data *Goods) error {
	goGoodsGoodsGoodsIdKey := fmt.Sprintf("%s%v", cacheGoGoodsGoodsGoodsIdPrefix, data.GoodsId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `goods_id` = ?", m.table, goodsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GoodsName, data.Title, data.Company, data.Category, data.Logo, data.Content, data.SalePrice, data.MinPrice, data.MaxPrice, data.Stock, data.Sale, data.IsAttr, data.Status, data.Deleted, data.CreateAt, data.UpdateAt, data.GoodsId)
	}, goGoodsGoodsGoodsIdKey)
	return err
}

func (m *defaultGoodsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoGoodsGoodsGoodsIdPrefix, primary)
}

func (m *defaultGoodsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `goods_id` = ? limit 1", goodsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGoodsModel) tableName() string {
	return m.table
}
