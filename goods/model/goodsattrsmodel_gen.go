// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsAttrsFieldNames          = builder.RawFieldNames(&GoodsAttrs{})
	goodsAttrsRows                = strings.Join(goodsAttrsFieldNames, ",")
	goodsAttrsRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsAttrsFieldNames, "`goods_attr_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	goodsAttrsRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsAttrsFieldNames, "`goods_attr_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGoGoodsGoodsAttrsGoodsAttrIdPrefix = "cache:goGoods:goodsAttrs:goodsAttrId:"
)

type (
	goodsAttrsModel interface {
		Insert(ctx context.Context, data *GoodsAttrs) (sql.Result, error)
		FindOne(ctx context.Context, goodsAttrId int64) (*GoodsAttrs, error)
		Update(ctx context.Context, data *GoodsAttrs) error
		Delete(ctx context.Context, goodsAttrId int64) error
	}

	defaultGoodsAttrsModel struct {
		sqlc.CachedConn
		table string
	}

	GoodsAttrs struct {
		GoodsAttrId int64  `db:"goods_attr_id"` // 商品id
		GoodsId     int64  `db:"goods_id"`      // 商品品类ID
		AttrName    string `db:"attr_name"`     // 属性名
		AttrVals    string `db:"attr_vals"`     // 属性值
		Deleted     int64  `db:"deleted"`       // 删除(0-正常，1-已删除)
		CreateAt    int64  `db:"create_at"`     // 创建时间
		UpdateAt    int64  `db:"update_at"`     // 更新时间
	}
)

func newGoodsAttrsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultGoodsAttrsModel {
	return &defaultGoodsAttrsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`goods_attrs`",
	}
}

func (m *defaultGoodsAttrsModel) Delete(ctx context.Context, goodsAttrId int64) error {
	goGoodsGoodsAttrsGoodsAttrIdKey := fmt.Sprintf("%s%v", cacheGoGoodsGoodsAttrsGoodsAttrIdPrefix, goodsAttrId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `goods_attr_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, goodsAttrId)
	}, goGoodsGoodsAttrsGoodsAttrIdKey)
	return err
}

func (m *defaultGoodsAttrsModel) FindOne(ctx context.Context, goodsAttrId int64) (*GoodsAttrs, error) {
	goGoodsGoodsAttrsGoodsAttrIdKey := fmt.Sprintf("%s%v", cacheGoGoodsGoodsAttrsGoodsAttrIdPrefix, goodsAttrId)
	var resp GoodsAttrs
	err := m.QueryRowCtx(ctx, &resp, goGoodsGoodsAttrsGoodsAttrIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `goods_attr_id` = ? limit 1", goodsAttrsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, goodsAttrId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsAttrsModel) Insert(ctx context.Context, data *GoodsAttrs) (sql.Result, error) {
	goGoodsGoodsAttrsGoodsAttrIdKey := fmt.Sprintf("%s%v", cacheGoGoodsGoodsAttrsGoodsAttrIdPrefix, data.GoodsAttrId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, goodsAttrsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GoodsId, data.AttrName, data.AttrVals, data.Deleted, data.CreateAt, data.UpdateAt)
	}, goGoodsGoodsAttrsGoodsAttrIdKey)
	return ret, err
}

func (m *defaultGoodsAttrsModel) Update(ctx context.Context, data *GoodsAttrs) error {
	goGoodsGoodsAttrsGoodsAttrIdKey := fmt.Sprintf("%s%v", cacheGoGoodsGoodsAttrsGoodsAttrIdPrefix, data.GoodsAttrId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `goods_attr_id` = ?", m.table, goodsAttrsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GoodsId, data.AttrName, data.AttrVals, data.Deleted, data.CreateAt, data.UpdateAt, data.GoodsAttrId)
	}, goGoodsGoodsAttrsGoodsAttrIdKey)
	return err
}

func (m *defaultGoodsAttrsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoGoodsGoodsAttrsGoodsAttrIdPrefix, primary)
}

func (m *defaultGoodsAttrsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `goods_attr_id` = ? limit 1", goodsAttrsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGoodsAttrsModel) tableName() string {
	return m.table
}
