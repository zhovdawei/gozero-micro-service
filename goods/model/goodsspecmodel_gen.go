// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsSpecFieldNames          = builder.RawFieldNames(&GoodsSpec{})
	goodsSpecRows                = strings.Join(goodsSpecFieldNames, ",")
	goodsSpecRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsSpecFieldNames, "`goods_spec_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	goodsSpecRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsSpecFieldNames, "`goods_spec_id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGoGoodsGoodsSpecGoodsSpecIdPrefix = "cache:goGoods:goodsSpec:goodsSpecId:"
)

type (
	goodsSpecModel interface {
		Insert(ctx context.Context, data *GoodsSpec) (sql.Result, error)
		FindOne(ctx context.Context, goodsSpecId int64) (*GoodsSpec, error)
		Update(ctx context.Context, data *GoodsSpec) error
		Delete(ctx context.Context, goodsSpecId int64) error
	}

	defaultGoodsSpecModel struct {
		sqlc.CachedConn
		table string
	}

	GoodsSpec struct {
		GoodsSpecId int64  `db:"goods_spec_id"` // 商品id
		GoodsId     int64  `db:"goods_id"`      // 商品品类ID
		Spec        string `db:"spec"`          // 规格组合值
		SalePrice   int64  `db:"sale_price"`    // 零售价(单位分)
		Stock       int64  `db:"stock"`         // 库存
		Sale        int64  `db:"sale"`          // 销量
		Preview     string `db:"preview"`       // 预览图
		Deleted     int64  `db:"deleted"`       // 删除(0-正常，1-已删除)
		CreateAt    int64  `db:"create_at"`     // 创建时间
		UpdateAt    int64  `db:"update_at"`     // 更新时间
	}
)

func newGoodsSpecModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultGoodsSpecModel {
	return &defaultGoodsSpecModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`goods_spec`",
	}
}

func (m *defaultGoodsSpecModel) Delete(ctx context.Context, goodsSpecId int64) error {
	goGoodsGoodsSpecGoodsSpecIdKey := fmt.Sprintf("%s%v", cacheGoGoodsGoodsSpecGoodsSpecIdPrefix, goodsSpecId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `goods_spec_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, goodsSpecId)
	}, goGoodsGoodsSpecGoodsSpecIdKey)
	return err
}

func (m *defaultGoodsSpecModel) FindOne(ctx context.Context, goodsSpecId int64) (*GoodsSpec, error) {
	goGoodsGoodsSpecGoodsSpecIdKey := fmt.Sprintf("%s%v", cacheGoGoodsGoodsSpecGoodsSpecIdPrefix, goodsSpecId)
	var resp GoodsSpec
	err := m.QueryRowCtx(ctx, &resp, goGoodsGoodsSpecGoodsSpecIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `goods_spec_id` = ? limit 1", goodsSpecRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, goodsSpecId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsSpecModel) Insert(ctx context.Context, data *GoodsSpec) (sql.Result, error) {
	goGoodsGoodsSpecGoodsSpecIdKey := fmt.Sprintf("%s%v", cacheGoGoodsGoodsSpecGoodsSpecIdPrefix, data.GoodsSpecId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodsSpecRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GoodsId, data.Spec, data.SalePrice, data.Stock, data.Sale, data.Preview, data.Deleted, data.CreateAt, data.UpdateAt)
	}, goGoodsGoodsSpecGoodsSpecIdKey)
	return ret, err
}

func (m *defaultGoodsSpecModel) Update(ctx context.Context, data *GoodsSpec) error {
	goGoodsGoodsSpecGoodsSpecIdKey := fmt.Sprintf("%s%v", cacheGoGoodsGoodsSpecGoodsSpecIdPrefix, data.GoodsSpecId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `goods_spec_id` = ?", m.table, goodsSpecRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GoodsId, data.Spec, data.SalePrice, data.Stock, data.Sale, data.Preview, data.Deleted, data.CreateAt, data.UpdateAt, data.GoodsSpecId)
	}, goGoodsGoodsSpecGoodsSpecIdKey)
	return err
}

func (m *defaultGoodsSpecModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoGoodsGoodsSpecGoodsSpecIdPrefix, primary)
}

func (m *defaultGoodsSpecModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `goods_spec_id` = ? limit 1", goodsSpecRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGoodsSpecModel) tableName() string {
	return m.table
}
