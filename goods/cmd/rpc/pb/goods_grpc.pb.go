// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/goods.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	QueryGoodsList(ctx context.Context, in *QueryGoodsListReq, opts ...grpc.CallOption) (*GoodsResp, error)
	QueryGoodsAttrs(ctx context.Context, in *QueryGoodsAttrsReq, opts ...grpc.CallOption) (*GoodsAttrsResp, error)
	QueryGoodsDetail(ctx context.Context, in *QueryGoodsDetailReq, opts ...grpc.CallOption) (*GoodsDetailResp, error)
	QueryGoodsSpecById(ctx context.Context, in *QueryGoodsSpecByIdReq, opts ...grpc.CallOption) (*GoodsSpecVO, error)
	QueryGoodsSpecs(ctx context.Context, in *QueryGoodsSpecsReq, opts ...grpc.CallOption) (*GoodsSpecsResp, error)
	QueryGoodsSpecBySpec(ctx context.Context, in *QueryGoodsSpecBySpecReq, opts ...grpc.CallOption) (*GoodsSpecVO, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) QueryGoodsList(ctx context.Context, in *QueryGoodsListReq, opts ...grpc.CallOption) (*GoodsResp, error) {
	out := new(GoodsResp)
	err := c.cc.Invoke(ctx, "/pb.user/QueryGoodsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryGoodsAttrs(ctx context.Context, in *QueryGoodsAttrsReq, opts ...grpc.CallOption) (*GoodsAttrsResp, error) {
	out := new(GoodsAttrsResp)
	err := c.cc.Invoke(ctx, "/pb.user/QueryGoodsAttrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryGoodsDetail(ctx context.Context, in *QueryGoodsDetailReq, opts ...grpc.CallOption) (*GoodsDetailResp, error) {
	out := new(GoodsDetailResp)
	err := c.cc.Invoke(ctx, "/pb.user/QueryGoodsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryGoodsSpecById(ctx context.Context, in *QueryGoodsSpecByIdReq, opts ...grpc.CallOption) (*GoodsSpecVO, error) {
	out := new(GoodsSpecVO)
	err := c.cc.Invoke(ctx, "/pb.user/QueryGoodsSpecById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryGoodsSpecs(ctx context.Context, in *QueryGoodsSpecsReq, opts ...grpc.CallOption) (*GoodsSpecsResp, error) {
	out := new(GoodsSpecsResp)
	err := c.cc.Invoke(ctx, "/pb.user/QueryGoodsSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryGoodsSpecBySpec(ctx context.Context, in *QueryGoodsSpecBySpecReq, opts ...grpc.CallOption) (*GoodsSpecVO, error) {
	out := new(GoodsSpecVO)
	err := c.cc.Invoke(ctx, "/pb.user/QueryGoodsSpecBySpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	QueryGoodsList(context.Context, *QueryGoodsListReq) (*GoodsResp, error)
	QueryGoodsAttrs(context.Context, *QueryGoodsAttrsReq) (*GoodsAttrsResp, error)
	QueryGoodsDetail(context.Context, *QueryGoodsDetailReq) (*GoodsDetailResp, error)
	QueryGoodsSpecById(context.Context, *QueryGoodsSpecByIdReq) (*GoodsSpecVO, error)
	QueryGoodsSpecs(context.Context, *QueryGoodsSpecsReq) (*GoodsSpecsResp, error)
	QueryGoodsSpecBySpec(context.Context, *QueryGoodsSpecBySpecReq) (*GoodsSpecVO, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) QueryGoodsList(context.Context, *QueryGoodsListReq) (*GoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGoodsList not implemented")
}
func (UnimplementedUserServer) QueryGoodsAttrs(context.Context, *QueryGoodsAttrsReq) (*GoodsAttrsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGoodsAttrs not implemented")
}
func (UnimplementedUserServer) QueryGoodsDetail(context.Context, *QueryGoodsDetailReq) (*GoodsDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGoodsDetail not implemented")
}
func (UnimplementedUserServer) QueryGoodsSpecById(context.Context, *QueryGoodsSpecByIdReq) (*GoodsSpecVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGoodsSpecById not implemented")
}
func (UnimplementedUserServer) QueryGoodsSpecs(context.Context, *QueryGoodsSpecsReq) (*GoodsSpecsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGoodsSpecs not implemented")
}
func (UnimplementedUserServer) QueryGoodsSpecBySpec(context.Context, *QueryGoodsSpecBySpecReq) (*GoodsSpecVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGoodsSpecBySpec not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_QueryGoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGoodsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryGoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/QueryGoodsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryGoodsList(ctx, req.(*QueryGoodsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryGoodsAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGoodsAttrsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryGoodsAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/QueryGoodsAttrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryGoodsAttrs(ctx, req.(*QueryGoodsAttrsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryGoodsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGoodsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryGoodsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/QueryGoodsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryGoodsDetail(ctx, req.(*QueryGoodsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryGoodsSpecById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGoodsSpecByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryGoodsSpecById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/QueryGoodsSpecById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryGoodsSpecById(ctx, req.(*QueryGoodsSpecByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryGoodsSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGoodsSpecsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryGoodsSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/QueryGoodsSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryGoodsSpecs(ctx, req.(*QueryGoodsSpecsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryGoodsSpecBySpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGoodsSpecBySpecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryGoodsSpecBySpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/QueryGoodsSpecBySpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryGoodsSpecBySpec(ctx, req.(*QueryGoodsSpecBySpecReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryGoodsList",
			Handler:    _User_QueryGoodsList_Handler,
		},
		{
			MethodName: "QueryGoodsAttrs",
			Handler:    _User_QueryGoodsAttrs_Handler,
		},
		{
			MethodName: "QueryGoodsDetail",
			Handler:    _User_QueryGoodsDetail_Handler,
		},
		{
			MethodName: "QueryGoodsSpecById",
			Handler:    _User_QueryGoodsSpecById_Handler,
		},
		{
			MethodName: "QueryGoodsSpecs",
			Handler:    _User_QueryGoodsSpecs_Handler,
		},
		{
			MethodName: "QueryGoodsSpecBySpec",
			Handler:    _User_QueryGoodsSpecBySpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/goods.proto",
}
